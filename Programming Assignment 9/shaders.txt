
<script id="cube-vs" type="notjs">
    precision highp float;

    attribute vec3 vpos;
    attribute vec3 vnormal;
    varying vec3 outColor;

    uniform mat4 view;
    uniform mat4 proj;
    uniform mat4 model;
    uniform vec3 lightdir;
    uniform vec3 cubecolor;

    void main(void) {
        gl_Position = proj * view * model * vec4(vpos, 1.0);
        vec4 normal = normalize(model * vec4(vnormal,0.0));
        float diffuse;
		float dot1=abs(dot(normal, vec4(lightdir,0.0)));
		if(lightdir.y>=0.0)
		{
			if(dot(normal, vec4(lightdir,0.0))>=0.0)
			{diffuse = 0.2 + 0.4*abs(dot(normal, vec4(lightdir,0.0)))+0.4*dot1*dot1*dot1;}
		}
		else
		{diffuse=0.2;}
        outColor = cubecolor * diffuse;
    }
</script>
<script id="cube-fs" type="notjs">
    precision highp float;
    varying vec3 outColor;
    void main(void) {
        gl_FragColor = vec4(outColor, 1.0);
    }
</script>

<script id="trial1-vs" type="notjs">
    precision highp float;

    attribute vec3 vpos;
    attribute vec3 vnormal;
    varying vec3 outColor;
	uniform vec3 text_coordinates;
    uniform mat4 view;
    uniform mat4 proj;
    uniform mat4 model;
    uniform vec3 lightdir;
    uniform vec3 cubecolor;

    void main(void) {
        gl_Position = proj * view * model * vec4(vpos, 1.0);
        vec4 normal = normalize(model * vec4(vnormal,0.0));
        float diffuse;
		float dot1=abs(dot(normal, vec4(lightdir,0.0)));
		if(lightdir.y>=0.0)
		{
			if(dot(normal, vec4(lightdir,0.0))>=0.0)
			{diffuse = 0.2 + 0.4*abs(dot(normal, vec4(lightdir,0.0)))+0.4*dot1*dot1*dot1;}
		}
		else
		{diffuse=0.2;}
        outColor = cubecolor * diffuse;
    }
</script>
<script id="trial1-fs" type="notjs">
    precision highp float;
    varying vec3 outColor;
    void main(void) {
        gl_FragColor = vec4(outColor, 1.0);
    }
</script>


<script id="heli-vs" type="notjs">
    precision highp float;

    attribute vec3 vpos;
	attribute vec3 eye;
    attribute vec3 vnormal;
    varying vec3 outColor;

    uniform mat4 view;
    uniform mat4 proj;
    uniform mat4 model;
    uniform vec3 lightdir;
    uniform vec3 cubecolor;
	

    void main(void) {
		vec4 eye=vec4(0.0,0.0,-1.0,0.0);
		eye=model*eye;
		eye=normalize(eye);
        gl_Position = proj * view * model * vec4(vpos, 1.0);
        vec4 normal = normalize(model * vec4(vnormal,0.0));
		vec4 h=normalize(eye+vec4(lightdir,0.0));
		float diffuse;
        float dot1=abs(dot(normal, h));
		//float dot2=dot1*dot1*dot1*dot1*dot1*dot1;
		float dot2=dot1*dot1;
		if(lightdir.y>=0.0)
		{
			if(dot(normal, vec4(lightdir,0.0))>=0.0)
			{diffuse = 0.2 + 0.4*abs(dot(normal, vec4(lightdir,0.0)))+0.4*dot2;}
		}
		else
		{diffuse=0.2;}
        outColor = cubecolor * diffuse;
    }
</script>
<script id="heli-fs" type="notjs">

    precision highp float;
    varying vec3 outColor;
    void main(void) {
        gl_FragColor = vec4(outColor, 1.0);
    }
</script>

<!-- Special Ground Plane Shader - makes a boring
  -- checkerboard
  -->
<script id="ground-vs" type="not-js">
    precision highp float;

    attribute vec3 vpos;
    varying vec3 outPos;

    uniform mat4 view;
    uniform mat4 proj;

    void main(void) {
        gl_Position = proj * view * vec4(vpos, 1.0);
        outPos = vpos;
    }
</script>
<script id="ground-fs" type="notjs">

    // note this is used for more than just the cube
    precision highp float;
    varying vec3 outPos;
    void main(void) {
        float xs = step(1.0,mod(outPos.x,2.0));
        float zs = step(1.0,mod(outPos.z,2.0));
        float ss = (xs>.5) ? zs : 1.0-zs;
        gl_FragColor = mix(vec4(0.5,0.5,0.5,1),
                           vec4(0.3,0.5,0.4,1),
                           ss
                           );

    }
</script>

<script id="house-vs" type="notjs">
// specialized shader for the simple cube
// we assume that the model matrix works as the normal
//      matrix - this only is try if the model matrix
//      it a rotate/translate
//      (uniform scale is OK since we re-normalize)
// color is solid
// simple lighting
    precision highp float;

    attribute vec3 vpos;
    attribute vec3 vnormal;
    varying vec3 outColor1;
    attribute vec2 vTexCoord;
    varying vec3 vEye;

    uniform mat4 view;
    uniform mat4 proj;
    uniform mat4 model;
    uniform vec3 lightdir;
    uniform vec3 cubecolor;
    varying vec4 varNormal;
    varying vec2 fTexCoord;

    void main(void) {
        gl_Position = proj * view * model * vec4(vpos, 1.0);
        vec4 normal = normalize(model * vec4(vnormal,0.0));
        
        vec3 eye = vec3(0.0, 0.0, -1.0);
        varNormal = normal;
        vEye = (view*model*vec4(eye, 1.0)).xyz;
        fTexCoord = vTexCoord;
        outColor1 = cubecolor;
    }
</script>
<script id="house-fs" type="notjs">
// simple shader that does vertex coloring
//  (e.g. the vertex shader figures the lighting
// note this is used for more than just the cube
    precision highp float;

    uniform vec3 lightdir;
    varying vec3 vEye;
    varying vec4 varNormal;
    uniform sampler2D texSampler1;
    varying vec2 fTexCoord;
    varying vec3 outColor1;
    void main(void) {

        float diffuse = 0.1;
        vec3 texColor=texture2D(texSampler1,fTexCoord).xyz;
        vec3 tempC = texColor;
        if(varNormal.y > 0.0)
            tempC = tempC + texColor*max(0.0, dot(lightdir, varNormal.xyz));

            
        vec3 h = normalize(vEye + lightdir);
        
        float spec = dot(h, varNormal.xyz);
        vec3 t = spec*vec3(0.0, 0.0, 1.0);
        t = t*t;
        

        vec3 finalC = (tempC  );
        if(vEye.y > 0.0)
            finalC =  tempC;


        gl_FragColor = vec4(finalC, 1.0);
    }
</script>


<script id="sat1-vs" type="notjs">
    precision highp float;

    attribute vec3 vpos;
	attribute vec3 eye;
    attribute vec3 vnormal;
    varying vec3 outColor;

    uniform mat4 view;
    uniform mat4 proj;
    uniform mat4 model;
    uniform vec3 lightdir;
    uniform vec3 cubecolor;
	

    void main(void) {
		vec4 eye=vec4(0.0,0.0,-1.0,0.0);
		eye=model*eye;
		eye=normalize(eye);
        gl_Position = proj * view * model * vec4(vpos, 1.0);
        vec4 normal = normalize(model * vec4(vnormal,0.0));
		vec4 h=normalize(eye+vec4(lightdir,0.0));
		float diffuse;
        float dot1=abs(dot(normal, h));
		//float dot2=dot1*dot1*dot1*dot1*dot1*dot1;
		float dot2=dot1*dot1;
		if(lightdir.y>=0.0)
		{
			if(dot(normal, vec4(lightdir,0.0))>=0.0)
			{diffuse = 0.2 + 0.4*abs(dot(normal, vec4(lightdir,0.0)))+0.4*dot2;}
		}
		else
		{diffuse=0.2;}
        outColor = cubecolor * diffuse;
    }
</script>
<script id="sat1-fs" type="notjs">